/* autogenerated by Processing revision 1276 on 2021-10-16 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Project_1 extends PApplet {

PImage bgi;
Mover ball;
int ballAll = 20;
ArrayList<Mover> baList = new ArrayList<Mover>();
lands[] land;

 public void setup() {
    /* size commented out by preprocessor */;
    bgi = loadImage("BGI.png");  
    setBallarray();
    setLandarray();
    bgiDemo();
}

 public void draw() {
    bgiDemo();
    measure();
    for (int i = 0;i < baList.size();i++) {
        baList.get(i).update(i);
    }
    for (int i = 0;i < 6;i++) {
        land[i].update();
    }    
    textSize(100);
    text(baList.size(),100,300);
}

 public void bgiDemo() {
    background(bgi);
    /*for (int i = 0;i < 6;i++){
        tint(255, land[i].imgColor);
        image(land[i].landImg,0,0,800,600);
    }*/
}
 public void measure() {
    if (mousePressed) {
        bgiDemo();
        textSize(50);
        text(mouseX,mouseX,mouseY + 30);
        textSize(50);
        text(mouseY,mouseX + 100,mouseY + 30);
        //出现lands的信息
    }
}
int renew = 30;
class lands{
    int birProb = 50;
    int dieProb = 2000;
    PVector loc;
    PVector size;
    PImage landImg;
    int imgColor=180;
    int ballNum;
    int landNo;
    
    lands(int l) {
        landNo = l;
        getLand(landNo);//depend on No
    }
    
     public void update() {
        if (frameCount % 30 ==  0) {
            ballCount();//update infor/50
            //ballAll= 1;
            //setBallarray();//random get a new baby/50
        }
    }
    
     public void getLand(int i) {
        switch(i) {
            case 0 : loc = new PVector(0,0); size = new PVector(180,280); landImg = loadImage("BL.png"); break;
            case 1 : loc = new PVector(270,0); size = new PVector(250,280); landImg = loadImage("G.png"); break;
            case 2 : loc = new PVector(600,0); size = new PVector(200,280); landImg = loadImage("YR.png"); break;
            case 3 : loc = new PVector(0,300); size = new PVector(200,280); landImg = loadImage("YL.png"); break;
            case 4 : loc = new PVector(270,300); size = new PVector(200,280); landImg = loadImage("R.png"); break;
            case 5 : loc = new PVector(600,300); size = new PVector(200,280); landImg = loadImage("BR.png"); break;
        }
    }
    
     public void ballCount() {
        ballNum = 0;
        for (int i = 0;i < baList.size();i++) {
            if (((baList.get(i).location.x < loc.x + size.x) && (baList.get(i).location.x > loc.x)) && 
               ((baList.get(i).location.y < loc.y + size.y) && (baList.get(i).location.y > loc.y))) 
            {
                ballNum ++;
                baList.get(i).landsNo = landNo;
            }
        }   
    }
     public int setRules() {
        if (ballNum > 150) {
            birProb = 60;
            imgColor = 50;
        }else if(ballNum < 3){
            birProb = 10;
            imgColor = 180;
        }else if(ballNum>300){
            birProb = 100;
            imgColor = 0;
            println("full");
        }else{
            birProb = 40;
            imgColor = 120;
        }
        return birProb;
    }
}

 public void setLandarray() {
    land = new lands[6];
    for (int i = 0;i < 6;i++) {
        land[i] = new lands(i);
        }
}
class Mover{    
    PVector location;
    PVector target;
    int birProb;
    int dieProb=2000;
    int colorB;
    int landsNo;
    int dieCount = 0;
    int birCount = 0;
    
    Mover() {
        int r = PApplet.parseInt(random(0,6));
        switch(r) {
            case 0 : 
                colorB = 0xFF1675D8;
                location = new PVector(random(20,160),random(20,260));
                break;
            case 1 : 
                colorB = 0xFF0F9845;
                location = new PVector(random(290,500),random(20,260));
                break;
            case 2 : 
                colorB = 0xFFC18F0E;
                location = new PVector(random(620,780),random(20,260));
                break;
            case 3 : 
                colorB = 0xFFC18F0E;
                location = new PVector(random(20,160),random(280,560));
                break;
            case 4 : 
                colorB = 0xFFA71125;
                location = new PVector(random(290,500),random(320,560));
                break;
            case 5 : 
                colorB = 0xFF1675D8;
                location = new PVector(random(620,780),random(320,560));
                break;
        }
    }
     public void update(int i) {
        getRules();
        death(i);
        birth(i);
        fight(i);
        move(i);
        fill(colorB,180);
        noStroke();
        ellipseMode(CENTER);
        circle(location.x,location.y,25); 
    }
    
     public void move(int i) {
        if (PVector.dist(target,location)>1 ||  PVector.dist(target,location)<- 1) {
            PVector dir = PVector.sub(target,location);
            dir.normalize(); 
            dir.mult(1);
            location.add(dir);
        } else{
            target = new PVector(location.x + PApplet.parseInt(random( -20,20)),location.y + PApplet.parseInt(random( -20,20)));
            while((target.x<20 ||  target.x>780) && (target.y<20 ||  target.y>580)) {
                target = new PVector(location.x + PApplet.parseInt(random( -20,20)),location.y + PApplet.parseInt(random( -20,20)));    
            }
        }
    }
     public void getRules(){
        birProb = land[landsNo].setRules();
    }
     public void death(int i) {
        dieCount++;
        if (dieCount > dieProb) {
            baList.remove(i);
        }
    }
     public void birth(int i) {
        boolean bir = true;
        for (int t = 0;t < baList.size();t++) {
            if (((i!= t) && (baList.size()<1000)) && 
               ((location.x - birProb<baList.get(t).location.x + 10) && (location.x + birProb>baList.get(t).location.x - 10)) && 
               ((location.y - birProb<baList.get(t).location.y + 10) && (location.y + birProb>baList.get(t).location.y - 10)))
            {
                bir = false;
            }
        }
        if (bir && (baList.size()<1000) &&  frameCount>200) {
            ball = new Mover();
            ball.target = new PVector(ball.location.x + PApplet.parseInt(random( -20,20)),ball.location.y + PApplet.parseInt(random( -20,20)));
            ball.location = baList.get(i).location.copy();
            ball.colorB = baList.get(i).colorB;
            baList.add(ball);
        }
    }
    
     public void fight(int i) {
        for (int t = 0;t < baList.size();t++) {
            if ((baList.get(i).colorB!=baList.get(t).colorB) && 
               ((location.x < baList.get(t).location.x + 10) && (location.x>baList.get(t).location.x)) && 
               ((location.y<baList.get(t).location.y + 10) && (location.y>baList.get(t).location.y)))
            {
                int r = PApplet.parseInt(random(0,2));
                switch(r) {
                    case 0 : baList.remove(i); break;
                    case 1 : baList.remove(t); break;
                }
            
            }
        }
    }
}

 public void setBallarray() {
    for (int i = 0;i < ballAll;i++) {
        ball = new Mover();
        baList.add(ball);
        ball.target = new PVector(ball.location.x + PApplet.parseInt(random( -20,20)),ball.location.y + PApplet.parseInt(random( -20,20)));
        
    }
}


  public void settings() { size(800, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Project_1" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
